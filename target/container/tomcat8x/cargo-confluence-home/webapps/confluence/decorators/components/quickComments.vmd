#requireResource("confluence.web.resources:ajs")
#set ($useWatch = $remoteUser && !$action.userWatchingPage)
#set ($commentTextareaTabIndex = 200)

#if ($page.type == "blogpost")
<div class="hidden parameters">
## TODO - replace this below with something like comment-page-title, hard to refactor :(( Is it even used? Selenium test check?
## Used by macrobrowser smart fields to set the page param for comments.
    <input type="hidden" id="pageTitle" value="/$page.datePath/$page.title">
</div>
#end

#macro (displayCommentActions $commentId $commentActionSection $webInterfaceContext)
    #set ($items=$webInterfaceManager.getDisplayableItems("system.comment.action/$commentActionSection", $webInterfaceContext))
    #if ($items)
    <ul class="comment-actions-$commentActionSection">
        #foreach ($item in $items)
        ## provide first class name for IE6 cause first-child selector doesn't work
            #if ($velocityCount==1) #set ($className="first") #else #set ($className="") #end
            #if ($item.styleClass) #set($className = "$className $item.styleClass") #end
        ## don't introduce a line break between the <li> and <a> otherwise this will introduce an unwanted spacing when this markup is rendered. See http://css-tricks.com/fighting-the-space-between-inline-block-elements/
            <li class="$className"><a #if ($item.tooltip)title="$item.tooltip.getDisplayableLabel($req, $webInterfaceContext)"#end href="$item.link.getDisplayableUrl($req, $webInterfaceContext)"
                #if ($item.link.id) id="${item.link.id}-$commentId" #end
                    ><span>$item.label.getDisplayableLabel($req, $webInterfaceContext)</span></a></li>
        #end
    </ul>
    #end
#end


#macro (commentThread $comment)
    #set ($page = $comment.container)
<li id="comment-thread-$comment.id" class="comment-thread">
    <div class="comment #if ($comment.id == $focusedCommentId) focused #end " id="comment-$comment.id">
        <p class="comment-user-logo">
            #userLogoBlock($comment.creator)
        </p>
        <div class="comment-header">
            <h4 class="author">$action.getText("comment.author.byline", ["#userLink ($comment.creator)"])#if ($page.type == "blogpost" && $comment.creator == $page.creator) <span class="aui-lozenge aui-lozenge-subtle">$i18n.getText('comment.author.lozenge')</span>#end</h4>
        </div>
        <div class="comment-body">
            <div class="comment-content wiki-content">
                $action.getXHtmlComments().get($comment)
            </div>
            <div class="comment-actions">
                #set ($webInterfaceContext = $action.getWebInterfaceContext($comment))
                    #displayCommentActions($comment.id "secondary" $webInterfaceContext)
                    #displayCommentActions($comment.id "primary" $webInterfaceContext)
            </div>
        </div>
    </div>

    #trackbackRdf ($trackbackUtils.getContentIdentifier($comment) $page.title $trackbackUtils.getPingUrl($comment))

    #if ( $action.threadComments && $action.replyToComment == $comment.id && $permissionHelper.canComment($action.authenticatedUser, $comment.container) && $action.isPrintableVersion()==false )
        <script>
            AJS.bind('rte-quick-edit-enable-handlers', function(){
                $('#reply-comment-$action.replyToComment').click();
            })
        </script>
    #end

    #if ($action.editComment && $action.comment && $action.comment.id == $comment.id && $permissionHelper.canEdit($remoteUser, $comment ))
        <script>
            AJS.bind('rte-quick-edit-enable-handlers', function(){
                $('#edit-comment-$action.comment.id').click();
            })
        </script>
    #end

    #if ($action.showCommentArea && $permissionHelper.canComment($action.authenticatedUser, $comment.container) && $action.isPrintableVersion()==false )
        <script>
            AJS.bind('rte-quick-edit-enable-handlers', function(){
                $('.quick-comment-prompt').click();
            })
        </script>
    #end

    #if ($threadComments)
        #if ($comment.children.size() > 0)
            <ol class="comment-threads">
                #foreach ($childComment in $comment.children)
                    #commentThread($childComment)
                #end
            </ol>
        #end
    #end
</li>
#end

#* make sure you pass in an AbstractPage as a decorator parameter when you call this inline decorator *#
#set ($page = $params.get("page"))

## NOTE: While we still have both statically and dynamically rendered comments in Confluence these templates are duplicated in comments.soy.
##       If you are changing one you will probably also need to change the other.

#if (!$action.isPrintableVersion())
    #requireResourcesForContext("atl.comments")
<div id="comments-section" class="pageSection group quickComment">
    #set ($pageLevelComments = $page.pageLevelComments)
    #if ($pageLevelComments.size() > 0)
        <div class="section-header">
            <h2 id="comments-section-title" class="section-title">
                #if ($pageLevelComments.size() == 1)
                    $action.getText("comment.singular")
                #else
                    $action.getText("comment.plural", [$pageLevelComments.size()])
                #end
            </h2>
        </div>
    #end

##    Happens when you try to edit a comment that doesn't exist
    #if ($action.editComment && !$action.comment)
        #applyDecorator ("message")
        #decoratorParam("type" "error")
        $action.getText("comment.edit.not.found")
    #end
#end

#* Show expanded comments. If there are none, then show nothing at all (no heading, zilch!) *#
#if ($pageLevelComments.size() > 0)
    #if ($threadComments)
        #set ($topLevelComments = $page.topLevelComments)
    #else
        #set ($topLevelComments = $pageLevelComments)
    #end
    <ol class="comment-threads top-level" id="page-comments">
        #foreach ($comment in $topLevelComments)
            #commentThread($comment)
        #end
    </ol>
#end

#set ($bottomCommentPanels=$webInterfaceManager.getDisplayableWebPanels("atl.comments.view.bottom", $action.context))
#if ($bottomCommentPanels && $permissionHelper.canComment($remoteUser, $page))
    <div class="bottom-comment-panels comment-panels">
        #foreach ($panel in $bottomCommentPanels)
        $panel.getHtml($action.context)
        #end
    </div>
#end
</div>
#end
